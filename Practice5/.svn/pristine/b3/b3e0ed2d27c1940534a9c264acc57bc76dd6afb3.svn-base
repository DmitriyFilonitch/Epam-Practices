package ua.nure.filonitch.practice5;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class Part5 implements Callable<Object> {

    private static final Object MONITOR = new Object();
    private static final int THREADS = 10;
    private static final int COLUMN = 20;
    private static final int LENGTH = System.lineSeparator().length();
    private static String fileName = "part5.txt";
    private static final String ENCODING = "Cp1251";

    private RandomAccessFile output;
    private int position;
    private String character;

    public Part5(RandomAccessFile output, int position, String charToFill, int stringLength) {
        this.output = output;
        this.position = position;

        StringBuilder sb = new StringBuilder(stringLength);
        for (int i = 0; i < COLUMN; i++) {
            sb.append(charToFill);
        }
        sb.append(System.lineSeparator());
        character = sb.toString();
    }

    @Override
    public Object call() throws IOException {
        RandomAccessFile raf = getRAF();
        synchronized (MONITOR) {
            raf.seek(position);
            raf.write(character.getBytes(ENCODING));
        }
        return null;
    }

    private RandomAccessFile getRAF() {
        return output;
    }

    public static void main(String[] args) throws IOException, InterruptedException, ExecutionException {
        Files.deleteIfExists(new File(fileName).toPath());
        File file = new File(fileName);
        RandomAccessFile raf = null;
        try(RandomAccessFile raf1 = new RandomAccessFile(file, "rw")) {
        raf = new RandomAccessFile(file, "rw");

        ExecutorService exe = Executors.newFixedThreadPool(THREADS);

        ArrayList<Future> futures = new ArrayList<>();

        int position = 0;
        for (int currentNumber = 0; currentNumber < THREADS; currentNumber++) {
            String charToFill = String.valueOf(currentNumber);
            int charLength = COLUMN * charToFill.length();
            int stringLength = charLength + LENGTH;

            Future<?> f = exe.submit(new Part5(raf, position, charToFill, stringLength));
            futures.add(f);

            position += stringLength;
        }

        for (Future<?> future : futures) {
            future.get();
        }
        
        exe.shutdown();
        } finally {
        raf.close();
        }
        System.out.println(new String(Files.readAllBytes(file.toPath()), ENCODING));
    }
}
