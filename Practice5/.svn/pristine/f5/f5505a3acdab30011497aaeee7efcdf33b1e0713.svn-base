package ua.nure.filonitch.practice5;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.io.UnsupportedEncodingException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class Part5 implements Callable<Object> {

	public static String NameOfFile = "part5.txt";
	public static final String ENCODING = "Cp1251";
	public String ch;
	public RandomAccessFile out;
	public int pos;

	public Part5(RandomAccessFile out, int pos, String ch2Fill, int strLength) {
		this.out = out;
		this.pos = pos;

		StringBuilder strbuild = new StringBuilder(strLength);
		for (int k = 0; k < 20; k++) {
			strbuild.append(ch2Fill);
		}
		strbuild.append(System.lineSeparator());
		ch = strbuild.toString();
	}

	@Override
	public Object call() {
		RandomAccessFile access = getRAF();
		synchronized (new Object()) {
			try {
				access.seek(pos);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			try {
				access.write(ch.getBytes(ENCODING));
			} catch (UnsupportedEncodingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return null;
	}

	private RandomAccessFile getRAF() {
		return out;
	}

	public static void main(String[] args) throws IOException, InterruptedException {
		Files.deleteIfExists(new File(NameOfFile).toPath());
		File file = new File(NameOfFile);
		RandomAccessFile raf = null;
		try (RandomAccessFile raf1 = new RandomAccessFile(file, "rw")) {
			raf = new RandomAccessFile(file, "rw");

			ExecutorService exec = Executors.newFixedThreadPool(10);

			@SuppressWarnings("rawtypes")
			ArrayList<Future> futures = new ArrayList<>();

			int pos = 0;
			for (int n = 0; n < 10; n++) {
				String ch2Fill = String.valueOf(n);
				int chLength = 20 * ch2Fill.length();
				int strLength = chLength + System.lineSeparator().length();

				Future<?> f = exec.submit(new Part5(raf, pos, ch2Fill, strLength));
				futures.add(f);

				pos += strLength;
			}

			for (Future<?> future : futures) {
				try {
					future.get();
				} catch (ExecutionException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

			exec.shutdown();
		} finally {
			raf.close();
		}
		System.out.println(new String(Files.readAllBytes(file.toPath()), ENCODING));
	}
}
