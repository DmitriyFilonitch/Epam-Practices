package ua.nure.filonitch.practice5;

/*public class Part3 {
	public static int counter;
	public static int counter2;
	public static int time;
	public static int amount;
	public static int amountOfThreads;

	public Thread[] threads;

	@SuppressWarnings("static-access")
	public Part3(int n, int k, int t) {
		this.time = t;
		this.amount = k;
		this.amountOfThreads = n;
	}
	public void reset() {
		counter = 0;
		counter2 = 0;
	}
	public static void main(String[] args) throws InterruptedException {
		int n = 5;
		int s = 5;
		int f = 20;
		Part3 p = new Part3(n, s, f);
		p.test();
		Thread.sleep(n * s * f);
		p.reset();
		p.testSync();
	}

	public void test() throws InterruptedException {
		for (int t = 0; t < amountOfThreads; t++) {
				Thread.sleep(10);
			new Unsynchronized().start();
		}
	}


	public void testSync() throws InterruptedException {
		for (int a = 0; a < amountOfThreads; a++) {
			Synchronized s = new Synchronized();
			s.start();
			s.join();
		}
	}

	public static void goNoSynch() {
		for (int a = 0; a < amount; a++) {
			System.out.println(counter + " " + counter2);
			counter++;
			try {
				Thread.sleep(time);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			counter2++;
		}
	}

   
	synchronized static void goSynch() {
		{
		for (int a = 0; a < amount; a++) {
			System.out.println(counter + " " + counter2);
			counter++;
			try {
				Thread.sleep(time);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			counter2++;
		}
		}
	}

	public class Unsynchronized extends Thread {
		public void run() {
			Part3.goNoSynch();
		}

	}

	public class Synchronized extends Thread {
		public void run() {
			Part3.goSynch();
		}
	}
}*/
public class Part3 {

	private int firstCounter;

	public int getFirstCounter() {
		return firstCounter;
	}

	public void setFirstCounter(int counter1) {
		this.firstCounter = counter1;
	}

	private int secondCounter;

	public int getSecondCounter() {
		return secondCounter;
	}

	public void setSecondCounter(int counter2) {
		this.secondCounter = counter2;
	}

	public void output() {

		setFirstCounter(getFirstCounter() + 1);
		try {
			Thread.sleep(10);
		} catch (InterruptedException e) {
			System.err.println("Thread:" + Thread.currentThread().getName()
					+ " is interrupted in Part3.output()");
		}
		setSecondCounter(getSecondCounter() + 1);
		System.out.print(firstCounter - secondCounter);
	}

	public synchronized void synchOutput() {

		setFirstCounter(getFirstCounter() + 1);
		try {
			Thread.sleep(10);
		} catch (InterruptedException e) {
			System.err.println("Thread:" + Thread.currentThread().getName()
					+ " is interrupted in method Part3.synchOutput()");
		}
		setSecondCounter(getSecondCounter() + 1);
		System.out.print(firstCounter - secondCounter);
	}

	public static void result() {
		final Part3 obj = new Part3();
		System.out.println("Synchronized output: ");
		for (int i = 0; i < 10; i++) {
			Thread myThread = new Thread() {
				public void run() {
					obj.synchOutput();
					System.out.println();
				};
			};
			myThread.start();
		}
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			System.err.println("Thread:" + Thread.currentThread().getName()
					+ " is interrupted in method result()");
		}
		System.out.println("NOT synchronized output: ");
		for (int i = 0; i < 10; i++) {
			Thread myThread = new Thread() {
				public void run() {
					obj.output();
					System.out.println();
				};
			};
			myThread.start();
		}
	}

	public static void main(String[] args) {
		result();
	}

}
