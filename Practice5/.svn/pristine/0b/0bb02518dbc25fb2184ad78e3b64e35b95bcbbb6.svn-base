package ua.nure.filonitch.practice5;

import java.io.File;
import java.io.IOException;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

class Part4 {

	static String getContent(String fileName) throws IOException {
		StringBuilder strbuild = new StringBuilder();
		Scanner scanner = new Scanner(new File(fileName));
		while (scanner.hasNextLine()) {
			strbuild.append(scanner.nextLine()).append(System.lineSeparator());
		}
		scanner.close();
		return strbuild.toString();
	}

	static int[][] getMatrixlength(String string) {
		int row = 1;
		int element = 0;
		int col = 0;
		String regexp = "[0-9]+\r\n";
		Pattern patt = Pattern.compile(regexp);
		Matcher match = patt.matcher(string);
		while (match.find()) {
			row++;
		}
		String regex1 = "[0-9]+";
		Pattern patt1 = Pattern.compile(regex1);
		Matcher match1 = patt1.matcher(string);
		while (match1.find()) {
			element++;
		}
		col = element / row;
		return new int[row][col];
	}

	static int[][] getMatrix(String string) {
		int a = 0;
		int b = 0;
		int[][] matr = getMatrixlength(string);
		String regexp = "[0-9]+";
		Pattern patt = Pattern.compile(regexp);
		Matcher match = patt.matcher(string);
		while (match.find()) {
			if (b == matr[0].length) {
				b = 0;
				a++;
			}
			matr[a][b] = Integer.parseInt(match.group());
			b++;
		}
		return matr;
	}

	public static int maxByOneThread(int[][] matr) throws InterruptedException {
		int maximal = 0;
		for (int i = 0; i < matr.length; i++) {
			for (int j = 0; j < matr[i].length; j++) {
				if (maximal < matr[i][j]) {
					maximal = matr[i][j];
				}		
					Thread.sleep(1);
			}

		}
		return maximal;
	}

	public static int maxByMultiThread(int[][] matr) throws IOException, InterruptedException {
		int number = 0;
		for (int i = 0; i < matr.length; i++) {
			Worker w = new Worker(i, getMatrix(getContent("part4.txt")));
			if (w.runs() > number) {
				number = w.runs();
			}
		}
		return number;
	}

	public static final class Worker {
		private int row;
		private int[][] matrix;
		private int max;

		private Worker(int m, int[][] matrixs) {
			row = m;
			matrix = matrixs.clone();
		}

		public int runs() throws InterruptedException {
			for (int j = 0; j < matrix[row].length; j++) {
				if (max < matrix[row][j]) {
					max = matrix[row][j];
				}
				Thread.sleep(1);
			}
			return max;
		}
	}

	public static void main(String[] args) throws Exception {

		int[][] matrix = getMatrix(getContent("part4.txt"));

		long start = System.currentTimeMillis();
		System.out.println(maxByMultiThread(matrix));
		long end = System.currentTimeMillis();
		System.out.println((end - start) / 5);

		long start1 = System.currentTimeMillis();
		System.out.println(maxByOneThread(matrix));
		long end1 = System.currentTimeMillis();
		System.out.println((end1 - start1));

	}
}