package ua.nure.filonitch.practice5;

/*public class Part3 {
	public static int counter;
	public static int counter2;
	public static int time;
	public static int amount;
	public static int amountOfThreads;

	public Thread[] threads;

	@SuppressWarnings("static-access")
	public Part3(int n, int k, int t) {
		this.time = t;
		this.amount = k;
		this.amountOfThreads = n;
	}
	public void reset() {
		counter = 0;
		counter2 = 0;
	}
	public static void main(String[] args) throws InterruptedException {
		int n = 5;
		int s = 5;
		int f = 20;
		Part3 p = new Part3(n, s, f);
		p.test();
		Thread.sleep(n * s * f);
		p.reset();
		p.testSync();
	}

	public void test() throws InterruptedException {
		for (int t = 0; t < amountOfThreads; t++) {
				Thread.sleep(10);
			new Unsynchronized().start();
		}
	}


	public void testSync() throws InterruptedException {
		for (int a = 0; a < amountOfThreads; a++) {
			Synchronized s = new Synchronized();
			s.start();
			s.join();
		}
	}

	public static void goNoSynch() {
		for (int a = 0; a < amount; a++) {
			System.out.println(counter + " " + counter2);
			counter++;
			try {
				Thread.sleep(time);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			counter2++;
		}
	}

   
	synchronized static void goSynch() {
		{
		for (int a = 0; a < amount; a++) {
			System.out.println(counter + " " + counter2);
			counter++;
			try {
				Thread.sleep(time);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			counter2++;
		}
		}
	}

	public class Unsynchronized extends Thread {
		public void run() {
			Part3.goNoSynch();
		}

	}

	public class Synchronized extends Thread {
		public void run() {
			Part3.goSynch();
		}
	}
}*/
public class Part3 {
    public static void main(String[] args) {
        Thread[] threads = new Thread[5];
        Counter c = new Counter();
        for(int i=0; i<5; ++i)
            threads[i] = new MyThreadSync(c);

        for(int i=0; i<5; ++i)
            threads[i].start();
    }
}
 class Counter {
    private int count1 = 0;
    private int count2 = 0;

    public synchronized void increment() throws InterruptedException {
        count1++;
        Thread.sleep(10);
        count2++;
        System.out.println( (count1 == count2) + ": " + Thread.currentThread().getName());
    }

    public void countOneIncrement(){
        count1++;
    }

    public void countTwoIncrement(){
        count2++;
    }

    public boolean isEquals(){ return count1 == count2; }

}
 class MyThread extends Thread {
    Counter counter;

    public MyThread(Counter c){ counter = c; }

    @Override
    public void run() {
        for(int i=0; i<10; ++i) {
            System.out.println(counter.isEquals() + ": " + getName());
            counter.countOneIncrement();
            try {
                sleep(10);
            } catch (InterruptedException e) {
                //e.printStackTrace();
            }
            counter.countTwoIncrement();
        }
    }
}
 class MyThreadSync extends Thread {
    Counter counter;

    public MyThreadSync(Counter c){ counter = c; }

    @Override
    public void run() {
        for(int i=0; i<10; ++i){
            try {
                counter.increment();
            } catch (InterruptedException e) {
                return;
            }
        }
    }
}
