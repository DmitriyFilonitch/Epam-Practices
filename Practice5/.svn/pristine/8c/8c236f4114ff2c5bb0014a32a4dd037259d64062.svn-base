package ua.nure.filonitch.practice5;

public class Part3 {
	public  int counter;
	public  int counter2;
	public  int time;
	public  int amount;
	public  int amountOfThreads;

	public Thread[] threads;

	public Part3(int n, int k, int t) {
		this.time = t;
		this.amount = k;
		this.amountOfThreads = n;
	}
	public void reset() {
		counter = 0;
		counter2 = 0;
	}

	public void test() throws InterruptedException {
		for (int t = 0; t < amountOfThreads; t++) {
				Thread.sleep(1);
			new Unsynchronized().start();
		}
	}
	public void testSync() throws InterruptedException {
		for (int a = 0; a < amountOfThreads; a++) {
			Synchronized s = new Synchronized();
			s.start();
			s.join();
		}
	}
	public void run() {
		for (int a = 0; a < amount; a++) {
			System.out.println(counter + " " + counter2);
			counter++;
			counter2++;
		}
	}

	public class Unsynchronized extends Thread {
		public void run() {
			for (int a = 0; a < amount; a++) {
				System.out.println(counter + " " + counter2);
				counter++;
				try {
					Thread.sleep(time);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				counter2++;
			}
		}

	}

	public class Synchronized extends Thread {
		public void run() {
			for (int a = 0; a < amount; a++) {
				System.out.println(counter + " " + counter2);
				counter++;
				counter2++;
			}
		}
	}
	public static void main(String[] args) throws InterruptedException {
		int n = 5;
		int s = 5;
		int f = 20;
		Part3 p = new Part3(n, s, f);
		p.test();
		Thread.sleep(n * s * f);
		p.reset();
		p.testSync();
	}
}
