package ua.nure.filonitch.practice6.part2;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

public class Part2 {

    public final int lengthofList;

    public Part2(int lengthofList) {
        this.lengthofList = lengthofList;
    }

    public static long removeByIndex(List<Integer> list, int k) {
       long time = System.currentTimeMillis();
         list.set(0, safePosition(list.size(), k));
         int i = list.size() - 1;
         while(list.size() != 1) {
           list.remove(i);
           i--;
         }
         return System.currentTimeMillis() - time;
     }

    public static long removeByIterator(List<Integer> list, int k) {
        long time = System.currentTimeMillis();
        removeByStep(k, list);
        return System.currentTimeMillis() - time;
    }

    public static List<Integer> removeByStep(int k, List<Integer> list) {
        int i = 0;
        int counter = 0;
        while(list.size() != 1) {
           ListIterator<Integer> iterator = list.listIterator();
        while (iterator.hasNext()) {
          if(counter != 0 && k != 1) {
            i = counter % k;
            iterator.next();
                if (i == 0) {
                    iterator.remove();
                }
          }
          if(list.size() == 1) {
          break;
        }else if(k == 1) {
            iterator.next();
            iterator.remove();
          }
          counter++;
        }
        }
        return list;
    }

    public List<Integer> getkillInArray() {
      List<Integer> killInArray = new ArrayList<>();
        for (int i = 0; i < lengthofList; i++) {
          killInArray.add(i);
        }
        return killInArray;
    }

    public List<Integer> getkillInLink() {
      List<Integer> killInLink = new LinkedList<>();
        for (int i = 0; i < lengthofList; i++) {
          killInLink.add(i);
        }
        return killInLink;
    }
    
    
    public static int safePosition(int n, int k) {
        int g = 0;
        for (int i = 0; i < n; ++i) {
            g = (g + k) % (i + 1);
        }
        return g;
    }
    
    public static void main(String[] args) {
              Part2 p = new Part2(10000);
              System.out.println(removeByIndex(p.getkillInLink(), 4));
              System.out.println(removeByIndex(p.getkillInArray(), 4));
              
              System.out.println(removeByIterator(p.getkillInLink(), 4));
              System.out.println(removeByIterator(p.getkillInArray(), 4));
        
    }

}