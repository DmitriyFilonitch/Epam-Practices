package ua.nure.filonitch.practice6.part5;
public class Tree<E extends Comparable<E>> {

    private Node<E> headOfTree;

    public void add(E elm) {
        if (headOfTree == null) {
            headOfTree = new Node<>(elm);
            return;
        }
        headOfTree.addNode(new Node<>(elm), headOfTree);
    }

    public void add(E[] elmts) {
        for (E elem : elmts) {
            add(elem);
        }
    }

    public boolean remove(E elm) {
        if (elm.compareTo(headOfTree.value) == 0) {
            Node<E> n = headOfTree.nextOfValue(headOfTree);
            if (n != null) {
                n.left = headOfTree.left;
                this.headOfTree = n;
                return true;
            } else if (headOfTree.left != null) {
                this.headOfTree = headOfTree.left;
                return true;
            }
            this.headOfTree = null;
            return true;
        }
        return helperOfRemove(elm, headOfTree, null, 0);
    }

    private boolean helperOfRemove(E elm, Node<E> cur, Node<E> previously, int m) {
        if (elm.compareTo(cur.value) == 0) {
            if(cur.left == null || cur.right == null){
                if(cur.left == null && cur.right == null){
                    headOfTree.setForPrev(null, previously, m);
                } else if(cur.left != null){
                    headOfTree.setForPrev(cur.left, previously, m);
                } else {
                    headOfTree.setForPrev(cur.right, previously, m);
                }
                return true;
            }
            Node<E> n = cur.nextOfValue(cur);
            n.right = cur.right;
            n.left = cur.left;
            headOfTree.setForPrev(n, previously, m);
            return true;
        }
        if (elm.compareTo(cur.value) > 0 && cur.right != null) {
            return helperOfRemove(elm, cur.right, cur, 1);
        }
        if (cur.left != null) {
            return helperOfRemove(elm, cur.left, cur, -1);
        }
        return false;
    }


    public void print() {
        StringBuilder result = new StringBuilder();
        mprint(result, headOfTree, new StringBuilder());
        System.out.println(result.toString());
    }

    private void mprint(StringBuilder strbuild, Node<E> t, StringBuilder spcs) {
        if (t.left != null) {
            spcs.append("  ");
            mprint(strbuild, t.left, spcs);
        }
        strbuild.append(spcs);
        strbuild.append(t.value);
        strbuild.append(System.lineSeparator());
        if (t.right != null) {
            spcs.append("  ");
            mprint(strbuild, t.right, spcs);
        }
        spcs.delete(0, 2);
    }

    private static class Node<E extends Comparable<E>> {
        private Node<E> left;
        private Node<E> right;
        private E value;

        public Node(E value) {
            this.value = value;
            left = null;
            right = null;
        }

        public void addNode(Node<E> elm, Node<E> cur) {
            if (elm.value.equals(cur.value)) {
                return;
            }
            if (elm.value.compareTo(cur.value) > 0) {
                if (cur.right == null) {
                    cur.right = elm;
                    return;
                }
                addNode(elm, cur.right);
            } else {
                if (cur.left == null) {
                    cur.left = elm;
                    return;
                }
                addNode(elm, cur.left);
            }
        }

        public Node<E> nextOfValue(Node<E> elm) {
            if (elm.right != null) {
                return leftNext(elm.right, elm, 1);
            } else {
                return null;
            }
        }

        private Node<E> leftNext(Node<E> elm, Node<E> previously, int m) {
            if (elm.left != null) {
                return leftNext(elm.left, elm, -1);
            } else {
                setForPrev(null, previously, m);
                return elm;
            }

        }

        public void setForPrev(Node<E> set, Node<E> previously, int m) {
            if(m == 1){
                previously.right = set;
            } else if(m == -1){
                previously.left = set;
            }
        }

    }
}