package ua.nure.filonitch.practice6.part2;

import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;
import java.util.LinkedList;

public class Part2 {
	private static final int N = 10_000;
	public int num;

	public static void main(String[] args) {
		Part2 part2 = new Part2(N);
		System.out.println("ArrayList#Iterator : " + part2.removeByIterator(part2.list, 4) + " ms");
		System.out.println("LinkedList#Iterator : " + part2.removeByIterator(part2.list2, 4) + " ms");
	}

	public final int getNumber() {
		return num;
	}

	public final void setNumber(int number) {
		this.num = number;
	}

	Part2(int number) {
		setNumber(number);
		list = new ArrayList<Integer>();
		list2 = new LinkedList<Integer>();
		fillCollection();
	}

	List<Integer> list;
	List<Integer> list2;

	public final void fillCollection() {
		for (int k = 0; k < getNumber(); k++) {
			list.add(k);
			list2.add(k);
		}
	}

	public long removeByIterator(List<Integer> list, int k) {
		long time = System.currentTimeMillis();
		remove(k, list);
		return System.currentTimeMillis() - time;
	}

	public static List<Integer> remove(int k, List<Integer> list) {
		int i = 0;
		int counter = 0;
		while (list.size() != 1) {
			ListIterator<Integer> iterator = list.listIterator();
			while (iterator.hasNext()) {
				if (counter != 0 && k != 1) {
					i = counter % k;
					iterator.next();
					if (i == 0) {
						iterator.remove();
					}
				}
				if (list.size() == 1) {
					break;
				} else if (k == 1) {
					iterator.next();
					iterator.remove();
				}
				counter++;
			}
		}
		return list;
	}
}