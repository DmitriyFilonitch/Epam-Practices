package ua.nure.filonitch.practice2;

import java.util.Iterator;
import java.util.NoSuchElementException;

public class ArrayImpl implements Array {
	Object[] arr = new Object[0];
	int Size;
	int ArrSize = 0;

	public static void main(String[] args) {

	}

	public class IteratorImpl implements Iterator<Object> {
		private int step = 0;
		int Count = 0;

		public boolean hasNext() {

			return ArrayImpl.this.Size > step;

		}

		public Object next() throws NoSuchElementException {
			if (step > arr.length) {
				throw new IllegalStateException();
			} else {
				return arr[step++];
			}
	}


		public void remove() {
			Count++;
			int n = step - 1;
			Size--;
			if (step < Count) {
				throw new IllegalStateException();

			} else if (step < arr.length) {
				arr[n] = arr[n + 1];
			}

		}
	}

	public void clear() {
		arr = new Object[ArrSize];
		Size = 0;
	}

	public int size() {
		return this.Size;
	}

	public Iterator<Object> iterator() {
		return new IteratorImpl();
	}

	public void add(Object element) {
		if (arr.length == Size) {
			addSize();
			arr[Size++] = element;
		}
	}

	public void addSize() {
		if (arr.length == Size) {
			Object[] newArr = new Object[arr.length + 1];
			for (int i = 0; i < arr.length; i++) {
				newArr[i] = arr[i];
			}
			arr = newArr;
		}
	}

	public void set(int index, Object element) {
		arr[index] = element;
	}

	public Object get(int index) {
		return arr[index];
	}

	public int indexOf(Object element) {
		int ind = 0;
		for (int i = 0; i < Size; i++) {
			if (arr[i] == element) {
				ind = i;
				break;
			} else if (i == Size - 1) {
				ind = -1;
			}
		}
		return ind;
	}

	public void remove(int index) {
		Size--;
		for (int i = index; i < Size; i++) {
			arr[i] = arr[i + 1];
		}
	}

	public String toString() {
		StringBuilder str = new StringBuilder();
		str.append("[");
		for (int i = 0; i < Size; i++) {
			str.append(arr[i]);
			if (i != Size - 1) {
				str.append(", ");
			}
		}
		str.append("]");

		return str.toString();
	}

}
