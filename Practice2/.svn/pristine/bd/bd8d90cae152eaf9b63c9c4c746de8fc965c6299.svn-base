package ua.nure.filonitch.practice2;

import java.util.Iterator;
import java.util.NoSuchElementException;

public class ListImpl implements List {
	Object[] arr = new Object[0];
	int size;
	int arsize;

    public ListImpl() {
    	arr = new Object[arsize];
        size = 0;
    }
    
    public static void main(String[] args) {
    	List l = new ListImpl();
    	l.addLast("A");
    	l.addLast("C");
    	l.addFirst("M");
    	l.addFirst("S");
    	l.addFirst(null);
    	System.out.println(l.remove("M"));
    	System.out.println(l.remove("C"));
    	System.out.println(l.remove("A"));
    	System.out.println(l.remove("K"));
    	System.out.println(l.toString());
    	System.out.println(l.size());
    	System.out.println(l.search("K"));
    }
	public void clear() {
		arr = new Object[arsize];
		size = 0;
	}

	public int size() {
		return this.size;
	}

	public class IteratorImpl implements Iterator<Object> {
		int count;
		private int step;

		public boolean hasNext() {

			return ListImpl.this.size > step;
		}
		@Override
		public Object next() {
			if (step > arr.length) {
				throw new NoSuchElementException();
			} else {
				return arr[step++];
			}
	}


		public void remove() {
			count++;
			int n = step - 1;
			size--;
			if (step < count) {
				throw new IllegalStateException();

			} else if (step < arr.length) {
				arr[n] = arr[n + 1];
			}

		}
	}

	public Iterator<Object> iterator() {
		return new IteratorImpl();
	}

	public void addFirst(Object element) {
		Object[] newArr = new Object[size + 1];
		newArr[0] = element;
		for (int i = 0, j = 1; i < size; i++, j++) {
			newArr[j] = arr[i];
		}
		arr = newArr;
		size++;
	}

	public void addLast(Object element) {
		if (arr.length <= size) {
			addSize();
			arr[size++] = element;
		} else {
			arr[size++] = element;
		}
	}

	public void addSize() {
		if (arr.length == size) {
			Object[] newArr = new Object[arr.length + 1];
			for (int i = 0; i < arr.length; i++) {
				newArr[i] = arr[i];
			}
			arr = newArr;
		}
	}

	public void removeFirst() {
		deleteByIndex(0);
	}

	public void deleteByIndex(int index) {
		size--;
		for (int i = index; i < size; i++) {
			arr[i] = arr[i + 1];
		}
	}

	public void removeLast() {
		deleteByIndex(size);
	}

	public Object getFirst() {
		return arr[0];
	}

	public Object getLast() {
		return arr[size - 1];
	}

	public Object search(Object element) {
		Object elem = null;
		if (element == null) {
			for (int i = 0; i < size; i++) {
				if (element == get(i)) {
					elem = get(i);
					break;
				}
			}
		}
		if (element != null) {
			for (int i = 0; i < size; i++) {
				if (element.equals(get(i))) {
					elem = get(i);
					break;
				}
			}
		}
		return elem;
	}

	public Object get(int index) {
		return arr[index];
	}

	public boolean remove(Object element) {
		boolean status = false;
		if (element == null) {
			for (int i = 0; i < size; i++) {
				if (element == arr[i]) {
					deleteByIndex(i);
					status = true;
					break;
				}
			}
		}
		if (element != null) {
			for (int i = 0; i < size; i++) {
				if (element.equals(arr[i])) {
					deleteByIndex(i);
					status = true;
					break;
				}
			}
		}
		return status;
	}

	public String toString() {
		StringBuilder str = new StringBuilder();
		str.append("[");
		for (int i = 0; i < size; i++) {
			str.append(arr[i]);
			if (i != size - 1) {
				str.append(", ");
			}
		}
		str.append("]");

		return str.toString();
	}

}
