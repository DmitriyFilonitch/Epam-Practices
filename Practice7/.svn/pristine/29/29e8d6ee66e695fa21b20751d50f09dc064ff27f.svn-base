package ua.nure.filonitch.practice7.controller;

import javax.xml.namespace.QName;

import javax.xml.stream.XMLEventReader;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.events.Attribute;
import javax.xml.stream.events.Characters;
import javax.xml.stream.events.EndElement;
import javax.xml.stream.events.StartElement;
import javax.xml.stream.events.XMLEvent;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.helpers.DefaultHandler;

import ua.nure.filonitch.practice7.constants.Constants;
import ua.nure.filonitch.practice7.constants.XML;
import ua.nure.filonitch.practice7.entity.Card;
import ua.nure.filonitch.practice7.entity.Cards;

/**
 * Controller for StAX parser.
 * 
 * @author D.Kolesnikov
 * 
 */
public class STAXController extends DefaultHandler {

	private String xmlFileName;

	// main container
	private Cards cards;

	public Cards getCards() {
		return cards;
	}

	public STAXController(String xmlFileName) {
		this.xmlFileName = xmlFileName;
	}

	/**
	 * Parses XML document with StAX (based on event reader). There is no validation
	 * during the parsing.
	 */
	public void parse() throws XMLStreamException {

		Card card = null;

		// current element name holder
		String currentElement = null;

		XMLInputFactory factory = XMLInputFactory.newInstance();

		factory.setProperty(XMLInputFactory.IS_NAMESPACE_AWARE, true);

		XMLEventReader reader = factory.createXMLEventReader(new StreamSource(xmlFileName));

		while (reader.hasNext()) {
			XMLEvent event = reader.nextEvent();

			// skip any empty content
			if (event.isCharacters() && event.asCharacters().isWhiteSpace()) {
				continue;
			}

			// handler for start tags
			if (event.isStartElement()) {
				StartElement startElement = event.asStartElement();
				currentElement = startElement.getName().getLocalPart();

				if (XML.CARDS.equalsTo(currentElement)) {
					cards = new Cards();
					continue;
				}

				if (XML.CARD.equalsTo(currentElement)) {
					card = new Card();
					continue;
				}
			}

			// handler for contents
			if (event.isCharacters()) {
				Characters characters = event.asCharacters();

				if (XML.THEMA.equalsTo(currentElement)) {
					card.setThema(characters.getData());
					continue;
				}

				if (XML.COUNTRY.equalsTo(currentElement)) {
					card.setCountry(characters.getData());
					continue;
				}
				
				if (XML.YEAR.equalsTo(currentElement)) {
					card.setYear(characters.getData());
					continue;
				}

				if (XML.AUTHOR.equalsTo(currentElement)) {
					card.setAuthor(characters.getData());
					continue;
				}

				if (XML.VALUABLE.equalsTo(currentElement)) {
					card.setValuable(characters.getData());
					continue;
				}

				if (XML.TYPE.equalsTo(currentElement)) {
					card.setType(characters.getData());
					continue;
				}

				if (XML.TYPEOFCARD.equalsTo(currentElement)) {
					card.setTypeofcard(characters.getData());
					continue;
				}

				if (XML.ISBEINGSENT.equalsTo(currentElement)) {
					card.setIsbeingsent(characters.getData());
					continue;
				}

				/*
				 * if (XML.TIME_CONSTRAINTS.equalsTo(currentElement)) {
				 * bank.setTimeConstraints(characters.getData()); continue; }
				 */
			}

			// handler for end tags
			if (event.isEndElement()) {
				EndElement endElement = event.asEndElement();
				String localName = endElement.getName().getLocalPart();

				if (XML.CARD.equalsTo(localName)) {
					cards.getName().add(card);
					continue;
				}

				if (XML.THEMA.equalsTo(localName)) {
					card.getThema();
				}
				
				if (XML.COUNTRY.equalsTo(localName)) {
					card.getCountry();
				}

				if (XML.YEAR.equalsTo(localName)) {
					card.getYear();
				}

				if (XML.AUTHOR.equalsTo(localName)) {
					card.getAuthor();
				}

				if (XML.VALUABLE.equalsTo(localName)) {
					card.getValuable();
				}

				if (XML.TYPE.equalsTo(localName)) {
					card.getType();
				}

				if (XML.TYPEOFCARD.equalsTo(localName)) {
					card.getTypeofcard();
				}

				if (XML.ISBEINGSENT.equalsTo(localName)) {
					card.getIsbeingsent();
				}

				/*
				 * if (XML.TIME_CONSTRAINTS.equalsTo(localName)) { bank.getTimeConstraints(); }
				 */
			}
		}
		reader.close();
	}

	public static void main(String[] args) throws Exception {

		// try to parse (valid) XML file (success)
		STAXController staxContr = new STAXController(Constants.VALID_XML_FILE);
		staxContr.parse(); // <-- do parse (success)

		// obtain container
		Cards cards = staxContr.getCards();

		// we have Test object at this point:
		System.out.println("====================================");
		System.out.print("Here is the test: \n" + cards);
		System.out.println("====================================");
	}
}