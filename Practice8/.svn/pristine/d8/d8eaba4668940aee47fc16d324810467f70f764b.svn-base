package ua.nure.filonitch.practice8.db;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import ua.nure.filonitch.practice8.db.entity.Team;
import ua.nure.filonitch.practice8.db.entity.User;

public class DBManager {
	private static final String CONNECTION_URL =  connect("connection.url");
	private static final String SQL_FIND_ALL_USERS = "SELECT * FROM users";
	private static final String SQL_FIND_USER_BY_LOGIN = "SELECT * FROM users WHERE login=?";
	private static final String SQL_INSERT_USER = "INSERT INTO users VALUES (DEFAULT, ?)";
	private static final String SQL_UPDATE_USER = "UPDATE users SET login=? WHERE id=?";
	private static final String SQL_DELETE_USER = "DELETE FROM users WHERE id=?";
	private static final String SQL_FIND_ALL_TEAM = "SELECT * FROM teams";
	private static final String SQL_INSERT_TEAM = "INSERT INTO teams (name) VALUES (?)";
	private static final String SQL_UPDATE_TEAM = "UPDATE teams SET name=? WHERE id=?";
	private static final String SQL_INSERT_USER_TO_THE_TEAM = "INSERT INTO users_teams VALUES (?, ?)";
	private static final String SQL_FIND_TEAM_BY_USER_ID = "SELECT teams.id, teams.name FROM users_teams "
			+ "JOIN users ON users_teams.user_id = users.id " + "JOIN teams ON users_teams.team_id = teams.id "
			+ "WHERE users.id = ?";
	private static final String SQL_DELETE_TEAM_BY_NAME = "DELETE FROM teams WHERE id=?";
	private static final String SQL_FIND_ID_TEAM_BY_NAME = "SELECT id FROM teams WHERE name=?";
	private static final String SQL_FIND_TEAM_BY_NAME = "SELECT * FROM teams WHERE name=?";
	private static DBManager instance;

	public static synchronized DBManager getInstance() {
		if (instance == null) {
			instance = new DBManager();
		}
		return instance;
	}

	private static String connect(String s) {
		ResourceBundle b = ResourceBundle.getBundle("app");
		return b.getString(s);
	}

	public static void main(String[] args) throws SQLException {
		Connection con = DriverManager.getConnection(CONNECTION_URL);
		System.out.println(con);
	}

	public List<User> findAllUsers() throws SQLException {
		List<User> users = new ArrayList<>();
		Connection con = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			con = DriverManager.getConnection(CONNECTION_URL);
			stmt = con.createStatement();
			rs = stmt.executeQuery(SQL_FIND_ALL_USERS);
			while (rs.next()) {
				users.add(extractUser(rs));
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
			throw ex;
		} finally {
			close(stmt, rs, con);
		}
		return users;
	}

	public User findUser(String login) throws SQLException {
		User user = null;
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			con = DriverManager.getConnection(CONNECTION_URL);
			pstmt = con.prepareStatement(SQL_FIND_USER_BY_LOGIN);
			pstmt.setString(1, login);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				user = extractUser(rs);
			}
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		} finally {
			close(pstmt, rs, con);
		}
		return user;
	}

	public boolean insertUser(User user) throws SQLException {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			
			con = DriverManager.getConnection(CONNECTION_URL);
			pstmt = con.prepareStatement(SQL_INSERT_USER, Statement.RETURN_GENERATED_KEYS);
			int i = 1;
			pstmt.setString(i++, user.getLogin());
			if (pstmt.executeUpdate() > 0) {
				rs = pstmt.getGeneratedKeys();
				if (rs.next()) {
					int userId = rs.getInt(1);
					user.setId(userId);
				}
			}
			if (rs != null && rs.next()) {
				user = extractUser(rs);
			}
		} catch (SQLException exc) {
			exc.printStackTrace();
			throw exc;
		} finally {
			close(pstmt, rs, con);
		}
		return true;
	}

	public boolean updateUser(User user) throws SQLException {
		boolean res = false;
		Connection con = null;
		PreparedStatement pstmt = null;
		try {
			con = DriverManager.getConnection(CONNECTION_URL);
			pstmt = con.prepareStatement(SQL_UPDATE_USER);
			int i = 1;
			pstmt.setString(i++, user.getLogin());
			pstmt.setInt(i++, user.getId());
			res = pstmt.executeUpdate() > 0;
		} catch (SQLException exc) {
			exc.printStackTrace();
			throw exc;
		} finally {
			close(pstmt, null, con);
		}
		return res;
	}

	public boolean deleteUser(int userId) throws SQLException {
		boolean res = false;
		Connection con = null;
		PreparedStatement pstmt = null;
		try {
			con = DriverManager.getConnection(CONNECTION_URL);
			pstmt = con.prepareStatement(SQL_DELETE_USER);
			int k = 1;
			pstmt.setInt(k++, userId);
			res = pstmt.executeUpdate() > 0;
		} catch (SQLException exc) {
			exc.printStackTrace();
			throw exc;
		} finally {
			close(pstmt, null, con);
		}

		return res;
	}

	private static void close(Statement stmt, ResultSet rs, Connection con) throws SQLException {
		if (stmt != null) {
			try {
				stmt.close();
			} catch (SQLException e1) {
				e1.printStackTrace();
				throw e1;
			}
		}

		if (rs != null) {
			try {
				rs.close();
			} catch (SQLException e2) {
				e2.printStackTrace();
				throw e2;
			}
		}

		if (con != null) {
			try {
				con.close();
			} catch (SQLException e3) {
				e3.printStackTrace();
				throw e3;
			}
		}
	}

	private static User extractUser(ResultSet rs) throws SQLException {
		User u = new User();
		u.setId(rs.getInt("id"));
		u.setLogin(rs.getString("login"));
		return u;
	}

	public List<Team> findAllTeams() throws SQLException {
		List<Team> groups = new ArrayList<>();
		try {
			Connection con = DriverManager.getConnection(CONNECTION_URL);
			Statement smnt = con.createStatement();
			ResultSet resultSet = smnt.executeQuery(SQL_FIND_ALL_TEAM);
			while (resultSet.next()) {
				Team t = new Team();
				groups.add(t);
				t.setId(resultSet.getInt(1));
				t.setName(resultSet.getString(2));
			}
		} catch (SQLException exc) {
			exc.printStackTrace();
			throw exc;
		}
		return groups;
	}

	public boolean insertTeam(Team team) throws SQLException {
		try {
			Connection conn = DriverManager.getConnection(CONNECTION_URL);
			PreparedStatement pstm = conn.prepareStatement(SQL_INSERT_TEAM, Statement.RETURN_GENERATED_KEYS);
			pstm.setString(1, team.getName());
			if (pstm.executeUpdate() != 1) {
				return false;
			}
			ResultSet resSet = pstm.getGeneratedKeys();
			if (resSet.next()) {
				int id = resSet.getInt(1);
				team.setId(id);
			}
		} catch (SQLException exc) {
			exc.printStackTrace();
			throw exc;
		}
		return true;
	}

	public User getUser(String login) throws SQLException {
		User u = null;
		Connection con = null;
		try {
			con = DriverManager.getConnection(CONNECTION_URL);
			PreparedStatement ps = con.prepareStatement(SQL_FIND_USER_BY_LOGIN);
			ps.setString(1, login);
			ResultSet resSet = ps.executeQuery();
			if (resSet.next()) {
				u = new User();
				u.setId(resSet.getInt("id"));
				u.setLogin(resSet.getString("login"));
			}
		} catch (SQLException exc) {
			exc.printStackTrace();
			throw exc;
		} finally {
			close(null, null, con);
		}
		return u;
	}

	public Team getTeam(String name) throws SQLException {
		Team t = null;
		try {
			Connection conn = DriverManager.getConnection(CONNECTION_URL);
			PreparedStatement prepStmt = conn.prepareStatement(SQL_FIND_TEAM_BY_NAME);
			prepStmt.setString(1, name);
			ResultSet resultSet = prepStmt.executeQuery();
			if (resultSet.next()) {
				t = new Team();
				t.setId(resultSet.getInt("id"));
				t.setName(resultSet.getString("name"));
			}
		} catch (SQLException exc) {
			exc.printStackTrace();
			throw exc;
		}
		return t;
	}

	public boolean setTeamsForUser(User user, Team... groups) {
		Connection conn = null;
		Lock l = new ReentrantLock();
		try {
			conn = DriverManager.getConnection(CONNECTION_URL);
			l.lock();
			conn.setAutoCommit(false);
			PreparedStatement pstmt = conn.prepareStatement(SQL_INSERT_USER_TO_THE_TEAM);
			for (Team g : groups) {
				pstmt.setInt(1, user.getId());
				pstmt.setInt(2, g.getId());
				pstmt.addBatch();
			}
			int[] usersTeams = pstmt.executeBatch();
			for (int i : usersTeams) {
				if (i != 1) {
					return false;
				}
			}
			conn.commit();
			return true;
		} catch (SQLException exc) {
			try {
				if (conn != null) {
					conn.rollback();
				}
			} catch (SQLException exc1) {
				exc1.printStackTrace();
			}
			exc.printStackTrace();
		} finally {
			try {
				if (conn != null) {
					conn.setAutoCommit(true);
				}
			} catch (SQLException exc2) {
				exc2.printStackTrace();
			}
			l.unlock();
		}
		return false;
	}

	public List<Team> getUserTeams(User user) throws SQLException {
		List<Team> teams = new ArrayList<>();
		try {
			Connection conn = DriverManager.getConnection(CONNECTION_URL);
			PreparedStatement pstmt = conn.prepareStatement(SQL_FIND_TEAM_BY_USER_ID);
			pstmt.setInt(1, user.getId());
			ResultSet resSet = pstmt.executeQuery();
			while (resSet.next()) {
				Team t = new Team();
				teams.add(t);
				t.setId(resSet.getInt(1));
				t.setName(resSet.getString(2));
			}
		} catch (SQLException exc) {
			exc.printStackTrace();
			throw exc;
		}
		return teams;
	}

	public boolean deleteTeam(Team team) throws SQLException {
		Connection conn = DriverManager.getConnection(CONNECTION_URL);
		PreparedStatement prStmt = conn.prepareStatement(SQL_FIND_ID_TEAM_BY_NAME);
		prStmt.setString(1, team.toString());
		ResultSet resultSet = prStmt.executeQuery();
		while (resultSet.next()) {
			int id = resultSet.getInt("id");
			PreparedStatement prStmt1 = conn.prepareStatement(SQL_DELETE_TEAM_BY_NAME);
			prStmt1.setInt(1, id);
			prStmt1.executeUpdate();
		}
		return true;
	}

	public boolean updateTeam(Team group) throws SQLException {
		try {
			Connection conn = DriverManager.getConnection(CONNECTION_URL);
			PreparedStatement prStmt = conn.prepareStatement(SQL_UPDATE_TEAM);
			prStmt.setString(1, group.getName());
			prStmt.setInt(2, group.getId());
			if (prStmt.executeUpdate() != 1) {
				return false;
			}
		} catch (SQLException exc) {
			exc.printStackTrace();
			throw exc;
		}
		return true;
	}
}
